"use strict";function quickVerifyRangeA1(e){return e.split(/(\d+|[a-zA-Z]+)/).every(e=>{var t=parseInt(e,36);return!!isNaN(t)||(isFinite(e)?t<=2183880786:t<=43321)})}Object.defineProperty(exports,"__esModule",{value:!0});const bounds={R:1048577,"R[":1048576,C:16385,"C[":16384};function quickVerifyRangeRC(e){const t=/([RC]\[?)(-?\d+)/gi;for(;null!==(o=t.exec(e));){var r=bounds[o[1]],o=parseInt(o[2],10);if(r<=o||o<=-r)return!1}return!0}const OPERATOR="operator",BOOLEAN="bool",ERROR="error",NUMBER="number",FUNCTION="function",NEWLINE="newline",WHITESPACE="whitespace",STRING="string",PATH_QUOTE="path-quote",PATH_BRACE="path-brace",PATH_PREFIX="path-prefix",RANGE="range",RANGE_BEAM="range-beam",RANGE_NAMED="range-named",FX_PREFIX="fx-prefix",UNKNOWN="unknown",MAX_COLS=16383,MAX_ROWS=1048575,re_ERROR=/^#(NAME\?|FIELD!|CALC!|VALUE!|REF!|DIV\/0!|NULL!|NUM!|N\/A|GETTING_DATA\b|SPILL!|UNKNOWN!|FIELD\b|CALC\b|SYNTAX\?|ERROR!)/i,re_OPERATOR=/^(<=|>=|<>|[-+/*^%&<>=]|[{},;]|[()]|@|:|!|#)/,re_BOOLEAN=/^(TRUE|FALSE)\b/i,re_FUNCTION=/^[A-Z]+(?=\s*\()/i,re_NEWLINE=/^\n+/,re_WHITESPACE=/^\s+/,re_STRING=/^"(?:""|[^"])*("|$)/,re_PATH_QUOTE=/^'(?:''|[^'])*('|$)/,re_PATH_BRACE=/^\[(?:[^\]])+(\]|$)/,re_PATH_PREFIX=/^([^ \t\n$!"`'#%&(){}<>,;:^@|~=*+-]+)(?=!)/,re_A1COL=/^\$?[A-Z]{1,3}:\$?[A-Z]{1,3}/i,re_A1ROW=/^\$?[1-9][0-9]{0,6}:\$?[1-9][0-9]{0,6}/i,re_A1RANGE=/^\$?[A-Z]{1,3}\$?[1-9][0-9]{0,6}/i,rPart="(?:R(?:\\[[+-]?\\d+\\]|[1-9][0-9]{0,6})?)",cPart="(?:C(?:\\[[+-]?\\d+\\]|[1-9][0-9]{0,4})?)",re_RCCOL=new RegExp("^".concat(cPart,"(:").concat(cPart,")?(?=\\W|$)"),"i"),re_RCROW=new RegExp("^".concat(rPart,"(:").concat(rPart,")?(?=\\W|$)"),"i"),re_RCRANGE=new RegExp("^(?:(?=[RC])".concat(rPart).concat(cPart,")"),"i"),re_NUMBER=/^(?:\d+(\.\d+)?(?:[eE][+-]?\d+)?|\d+)/,re_NAMED=/^[A-Z\d\\_.?]+/i,tokenHandlersA1=[[ERROR,re_ERROR],[OPERATOR,re_OPERATOR],[BOOLEAN,re_BOOLEAN],[FUNCTION,re_FUNCTION],[NEWLINE,re_NEWLINE],[WHITESPACE,re_WHITESPACE],[STRING,re_STRING],[PATH_QUOTE,re_PATH_QUOTE],[PATH_BRACE,re_PATH_BRACE],[PATH_PREFIX,re_PATH_PREFIX],[RANGE,re_A1RANGE,quickVerifyRangeA1],[RANGE_BEAM,re_A1COL,quickVerifyRangeA1],[RANGE_BEAM,re_A1ROW,quickVerifyRangeA1],[NUMBER,re_NUMBER],[RANGE_NAMED,re_NAMED]],tokenHandlersRC=[[ERROR,re_ERROR],[OPERATOR,re_OPERATOR],[BOOLEAN,re_BOOLEAN],[FUNCTION,re_FUNCTION],[NEWLINE,re_NEWLINE],[WHITESPACE,re_WHITESPACE],[STRING,re_STRING],[PATH_QUOTE,re_PATH_QUOTE],[PATH_BRACE,re_PATH_BRACE],[PATH_PREFIX,re_PATH_PREFIX],[RANGE,re_RCRANGE,quickVerifyRangeRC],[RANGE_BEAM,re_RCROW,quickVerifyRangeRC],[RANGE_BEAM,re_RCCOL,quickVerifyRangeRC],[NUMBER,re_NUMBER],[RANGE_NAMED,re_NAMED]],tokenHandlersRefsA1=[[OPERATOR,/^[!:]/],[PATH_QUOTE,re_PATH_QUOTE],[PATH_BRACE,re_PATH_BRACE],[PATH_PREFIX,re_PATH_PREFIX],[RANGE,re_A1RANGE,quickVerifyRangeA1],[RANGE_BEAM,re_A1COL,quickVerifyRangeA1],[RANGE_BEAM,re_A1ROW,quickVerifyRangeA1],[RANGE_NAMED,re_NAMED]],tokenHandlersRefsRC=[[OPERATOR,/^!/],[PATH_QUOTE,re_PATH_QUOTE],[PATH_BRACE,re_PATH_BRACE],[PATH_PREFIX,re_PATH_PREFIX],[RANGE,re_RCRANGE,quickVerifyRangeRC],[RANGE_BEAM,re_RCROW,quickVerifyRangeRC],[RANGE_BEAM,re_RCCOL,quickVerifyRangeRC],[RANGE_NAMED,re_NAMED]],isType=(e,t)=>e&&e.type===t,isRangeOp=e=>e&&":"===e.value,isBangOp=e=>e&&"!"===e.value;function getTokens(o){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[],R=2<arguments.length&&void 0!==arguments[2]&&arguments[2],a=3<arguments.length&&void 0!==arguments[3]&&arguments[3];const A=[];let E=0;var e,i=e=>A[A.length-e];for(/^=/.test(o)&&(e={type:FX_PREFIX,value:"=",...R?{range:[0,1]}:{}},E++,A.push(e));E<o.length;){var l=E,p=o.slice(E);let t="",r="";for(let e=0;e<n.length;e++){const[N,_,f]=n[e];var u=_.exec(p);if(u&&(!f||f(u[0]))){t=N,r=u[0],E+=u[0].length;break}}t||(t=UNKNOWN,r=o[E],E++);let e={type:t,value:r,...R?{range:[l,E]}:{}};if(a&&(t===RANGE||t===RANGE_NAMED||t===RANGE_BEAM)){const c=[];isRangeOp(i(1))&&isType(i(2),RANGE)&&t===RANGE&&c.unshift(...A.splice(-2,2)),isBangOp(i(1))&&(isType(i(2),PATH_QUOTE)||isType(i(2),PATH_BRACE)?c.unshift(...A.splice(-2,2)):isType(i(2),PATH_PREFIX)&&(l=isType(i(3),PATH_BRACE)?3:2,c.unshift(...A.splice(-l,l)))),c.length&&(e={type:t,value:c.map(e=>e.value).join("")+r,...R?{range:[c[0].range[0],E]}:{}})}A.push(e)}return A}function tokenize(e){var{emitRanges:t=!1,mergeRanges:r=!0,r1c1:o=!1}=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return getTokens(e,o?tokenHandlersRC:tokenHandlersA1,t,r)}const unquote=e=>e.slice(1,-1).replace(/''/g,"'"),pRangeOp=e=>e&&":"===e.value&&{},pRange=e=>e&&e.type===RANGE&&{r0:e.value},pRange2=e=>e&&e.type===RANGE&&{r1:e.value},pBang=e=>e&&"!"===e.value&&{},pBeam=e=>e&&e.type===RANGE_BEAM&&{r0:e.value},pSheet=e=>e&&e.type===PATH_PREFIX&&/^[^:\\/?*[\]]{0,31}$/.test(e.value)&&{sheetName:e.value},pFile=e=>e&&e.type===PATH_BRACE&&{workbookName:e.value.slice(1,-1)},pFile2=e=>e&&e.type===PATH_PREFIX&&{workbookName:e.value},pNamed=e=>e&&e.type===RANGE_NAMED&&{name:e.value},pQuoted=e=>{if(e&&e.type===PATH_QUOTE){var t=/(?:\[(.+?)\])?([^[\]]+?)$/.exec(unquote(e.value));if(t){var[,e,t]=t;if(!t||/^[^:\\/?*[\]]{0,31}$/.test(t))return{workbookName:e||"",sheetName:t||""}}}},pQuoted2=e=>e&&e.type===PATH_QUOTE&&{workbookName:unquote(e.value)},validRuns=[[pRange],[pRange,pRangeOp,pRange2],[pBeam],[pQuoted,pBang,pRange],[pQuoted,pBang,pRange,pRangeOp,pRange2],[pQuoted,pBang,pBeam],[pSheet,pBang,pRange],[pSheet,pBang,pRange,pRangeOp,pRange2],[pSheet,pBang,pBeam],[pFile,pSheet,pBang,pRange],[pFile,pSheet,pBang,pRange,pRangeOp,pRange2],[pFile,pSheet,pBang,pBeam]],validRunsNamed=validRuns.concat([[pNamed],[pFile2,pBang,pNamed],[pQuoted2,pBang,pNamed]]);function parseRef(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1];const r=getTokens(e,2<arguments.length&&void 0!==arguments[2]?arguments[2]:[],!1,!1);var o={sheetName:"",workbookName:"",r0:"",r1:"",name:""};r.length&&r[0].type===FX_PREFIX&&r.shift();const n=t?validRunsNamed:validRuns;for(let e=0;e<n.length;e++){const R={...o};if(n[e].length===r.length)if(n[e].every((e,t)=>{t=e(r[t]);return Object.assign(R,t),t}))return R}return null}function fromCol(e){const t=(e||"").toUpperCase();let r=0,o=0;for(;o!==t.length;++o){var n=t.charCodeAt(o);65<=n&&n<=90&&(r=26*r+n-64)}return r-1}function toCol(e){let t=e,r="";for(;0<=t;)r=String.fromCharCode(t%26+65)+r,t=Math.floor(t/26)-1;return r}function fromRow(e){return+e-1}function toRow(e){return String(e+1)}function toRelative(e){var{top:t,left:r,bottom:o,right:e}=e;return{top:t,left:r,bottom:o,right:e,$left:!1,$right:!1,$top:!1,$bottom:!1}}function toAbsolute(e){var{top:t,left:r,bottom:o,right:e}=e;return{top:t,left:r,bottom:o,right:e,$left:!0,$right:!0,$top:!0,$bottom:!0}}function toA1(e){var t=e=>e?"$":"",{top:r,left:o,bottom:n,right:R,$left:a,$right:A,$top:E,$bottom:e}=e;return 0===r&&n===MAX_ROWS?t(a)+toCol(o)+":"+t(A)+toCol(R):0===o&&R===MAX_COLS?t(E)+toRow(r)+":"+t(e)+toRow(n):null==R||null==n||R===o&&n===r?t(a)+toCol(o)+t(E)+toRow(r):t(a)+toCol(o)+t(E)+toRow(r)+":"+t(A)+toCol(R)+t(e)+toRow(n)}function fromA1(e){let t,r=0,o=0,n=MAX_ROWS,R=MAX_COLS,a=!1,A=!1,E=!1,i=!1;if(t=/^(\$?)([A-Z]{1,3}):(\$?)([A-Z]{1,3})$/.exec(e)){var l=fromCol(t[2]),p=fromCol(t[4]);return o=Math.min(l,p),R=Math.max(l,p),A=!!t[l<=p?1:3],i=!!t[l<=p?3:1],a=!0,E=!0,{top:r,left:o,bottom:n,right:R,$top:a,$left:A,$bottom:E,$right:i}}if(t=/^(\$?)([1-9]\d{0,6}):(\$?)([1-9]\d{0,6})$/.exec(e)){var p=fromRow(t[2]),u=fromRow(t[4]);return r=Math.min(p,u),n=Math.max(p,u),a=!!t[p<=u?1:3],E=!!t[p<=u?3:1],A=!0,i=!0,{top:r,left:o,bottom:n,right:R,$top:a,$left:A,$bottom:E,$right:i}}var[u,e]=e.split(":");return(t=/^(\$?)([A-Z]{1,3})(\$?)([1-9]\d{0,6})$/i.exec(u))?(o=fromCol(t[2]),r=fromRow(t[4]),A=!!t[1],a=!!t[3],e&&(t=/^(\$?)([A-Z]{1,3})(\$?)([1-9]\d{0,6})$/i.exec(e))?(R=fromCol(t[2]),n=fromRow(t[4]),i=!!t[1],E=!!t[3],n<r&&([r,n,a,E]=[n,r,E,a]),R<o&&([o,R,A,i]=[R,o,i,A])):(n=r,R=o,E=a,i=A),{top:r,left:o,bottom:n,right:R,$top:a,$left:A,$bottom:E,$right:i}):null}function parseA1Ref(e){const t=parseRef(e,!(1<arguments.length&&void 0!==arguments[1])||arguments[1],tokenHandlersRefsA1);if(t&&(t.r0||t.name)){let e=null;return t.r0&&(e=t.r1?fromA1(t.r0+":"+t.r1):fromA1(t.r0)),t.name||e?(t.range=e,delete t.r0,delete t.r1,t):null}return null}var a1={fromCol:fromCol,toCol:toCol,toRelative:toRelative,toAbsolute:toAbsolute,to:toA1,from:fromA1,parse:parseA1Ref};function getIDer(){let e=1;return()=>"fxg"+e++}function addMeta(e){let{sheetName:n="",workbookName:R=""}=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};const a=[];let A=null;const E={},i=getIDer();return e.forEach(e=>{if("("===e.value)e.depth=a.length,a.push(e);else if(")"===e.value){const o=a.pop();var t;o?(t=i(),e.groupId=t,e.depth=o.depth,o.groupId=t):e.error=!0}else{var r;"{"===e.value?A?e.error=!0:A=e:"}"===e.value?(A?(r=i(),e.groupId=r,A.groupId=r):e.error=!0,A=null):e.type===RANGE||e.type===RANGE_BEAM?(r=(r=parseA1Ref(e.value,!1))&&"[".concat(r.workbookName||R,"]").concat(r.sheetName||n,"!").concat(r.range?toA1(toRelative(r.range)):r.name).toLowerCase())&&(r in E?e.groupId=E[r]:(e.groupId=i(),E[r]=e.groupId)):e.type===UNKNOWN&&(e.error=!0)}}),e}function toCoord(e,t){return t?String(e+1):e?"["+e+"]":""}function toRC(e){var{r0:t,c0:r,r1:o,c1:n,$c0:R,$c1:a,$r0:A,$r1:e}=e;if(0===t&&o===MAX_ROWS){var E=toCoord(r,R),i=toCoord(n,a);return"C"+(E===i?E:E+":C"+i)}if(0===r&&n===MAX_COLS){E=toCoord(t,A),i=toCoord(o,e);return"R"+(E===i?E:E+":R"+i)}A=toCoord(t,A),e=toCoord(o,e),R=toCoord(r,R),a=toCoord(n,a);return A!==e||R!==a?"R"+A+"C"+R+":R"+e+"C"+a:"R"+A+"C"+R}function parseRCPart(e){let t=0,r=0,o=MAX_ROWS,n=MAX_COLS,R=!1,a=!1,A=!1,E=!1;var i=/^R(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);i?(i[1]?t=parseInt(i[1],10):i[2]&&(t=parseInt(i[2],10)-1,R=!0),o=t,A=R,e=e.slice(i[0].length)):(R=!0,A=!0);var l=/^C(?:\[([+-]?\d+)\]|(\d+))?/.exec(e);return l?(l[1]?r=parseInt(l[1],10):l[2]&&(r=parseInt(l[2],10)-1,a=!0),n=r,E=a,e=e.slice(l[0].length)):(a=!0,E=!0),!i&&!l||e.length?null:{r0:t,c0:r,r1:o,c1:n,$r0:R,$c0:a,$r1:A,$c1:E}}function fromRC(e){var[t,e]=e.split(":",2);const r=parseRCPart(t);if(!r)return null;if(r&&e){e=parseRCPart(e);if(!e)return null;r.r1=e.r1,r.c1=e.c1,r.$r1=e.$r1,r.$c1=e.$c1}return r}function parseRCRef(e){const t=parseRef(e,!(1<arguments.length&&void 0!==arguments[1])||arguments[1],tokenHandlersRefsRC);if(t&&(t.r0||t.name)){e=t.r1?fromRC(t.r0+":"+t.r1):fromRC(t.r0);return t.name||e?(t.range=e,delete t.r0,delete t.r1,t):null}return null}var rc={to:toRC,from:fromRC,parse:parseRCRef};function translateToRC(e,t){const{top:n,left:R}=fromA1(t);t="string"==typeof e;const r=t?tokenize(e,{emitRanges:!1,mergeRanges:!1,r1c2:!1}):e;return r.forEach(e=>{if(e.type===RANGE){const r={};var t=fromA1(e.value);r.r0=t.$top?t.top:t.top-n,r.$r0=t.$top,r.r1=t.$bottom?t.bottom:t.bottom-n,r.$r1=t.$bottom,r.c0=t.$left?t.left:t.left-R,r.$c0=t.$left,r.c1=t.$right?t.right:t.right-R,r.$c1=t.$right,e.value=toRC(r)}else if(e.type===RANGE_BEAM){const o={};t=fromA1(e.value);o.r0=t.$top?t.top:t.top-n,o.$r0=t.$top,o.r1=t.$bottom?t.bottom:t.bottom-n,o.$r1=t.$bottom,o.c0=t.$left?t.left:t.left-R,o.$c0=t.$left,o.c1=t.$right?t.right:t.right-R,o.$c1=t.$right,e.value=toRC(o)}}),t?r.map(e=>e.value).join(""):r}function toFixed(e,t,r,o){let n=e;return t||(n=r+e,n<0&&(n=o+n+1),n>o&&(n-=o+1)),n}function translateToA1(e,t){const R=fromA1(t);t="string"==typeof e;const r=t?tokenize(e,{emitRanges:!1,mergeRanges:!1,r1c1:!0}):e;return r.forEach(e=>{if(e.type===RANGE||e.type===RANGE_BEAM){const n={};var t=fromRC(e.value),r=toFixed(t.r0,t.$r0,R.top,MAX_ROWS),o=toFixed(t.r1,t.$r1,R.top,MAX_ROWS);o<r?(n.top=o,n.$top=t.$r1,n.bottom=r,n.$bottom=t.$r0):(n.top=r,n.$top=t.$r0,n.bottom=o,n.$bottom=t.$r1);r=toFixed(t.c0,t.$c0,R.left,MAX_COLS),o=toFixed(t.c1,t.$c1,R.left,MAX_COLS);o<r?(n.left=o,n.$left=t.$c1,n.right=r,n.$right=t.$c0):(n.left=r,n.$left=t.$c0,n.right=o,n.$right=t.$c1),e.value=toA1(n)}}),t?r.map(e=>e.value).join(""):r}const tokenTypes={OPERATOR:OPERATOR,BOOLEAN:BOOLEAN,ERROR:ERROR,NUMBER:NUMBER,FUNCTION:FUNCTION,NEWLINE:NEWLINE,WHITESPACE:WHITESPACE,STRING:STRING,PATH_QUOTE:PATH_QUOTE,PATH_BRACE:PATH_BRACE,PATH_PREFIX:PATH_PREFIX,RANGE:RANGE,RANGE_BEAM:RANGE_BEAM,RANGE_NAMED:RANGE_NAMED,FX_PREFIX:FX_PREFIX,UNKNOWN:UNKNOWN};exports.MAX_COLS=MAX_COLS,exports.MAX_ROWS=MAX_ROWS,exports.a1=a1,exports.addMeta=addMeta,exports.rc=rc,exports.tokenTypes=tokenTypes,exports.tokenize=tokenize,exports.translateToA1=translateToA1,exports.translateToRC=translateToRC;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
